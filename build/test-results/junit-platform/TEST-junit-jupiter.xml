<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="JUnit Jupiter" tests="232" skipped="0" failures="0" errors="0" time="0.467" hostname="LAPTOP-6NLKKOBG" timestamp="2020-05-24T16:37:20">
<properties>
<property name="file.encoding" value="UTF-8"/>
<property name="file.separator" value="\"/>
<property name="java.class.path" value="C:\Users\nicol\Documents\Diffie\progetto1920-diffie\build\classes\java\test;C:\Users\nicol\Documents\Diffie\progetto1920-diffie\build\resources\test;C:\Users\nicol\Documents\Diffie\progetto1920-diffie\build\classes\java\main;C:\Users\nicol\Documents\Diffie\progetto1920-diffie\build\resources\main;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.google.apis\google-api-services-drive\v3-rev154-1.25.0\b840aeb45c31b97e28f365667f93bbd86fd8790d\google-api-services-drive-v3-rev154-1.25.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.google.api-client\google-api-client\1.25.0\e7ff725e89ff5dcbed107be1a24e8102ae2441ee\google-api-client-1.25.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.google.oauth-client\google-oauth-client-jetty\1.23.0\e0deaf34371e9ca09f9a04bcbaa854243283cae4\google-oauth-client-jetty-1.23.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.google.guava\guava\21.0\3a3d111be1be1b745edfa7d91678a12d7ed38709\guava-21.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.junit.vintage\junit-vintage-engine\5.6.0\a8e5f7ae69043582a5ab05bdaa62ba4406f403f0\junit-vintage-engine-5.6.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.junit.platform\junit-platform-engine\1.6.0\a3a6ec96c010875444b3ca31828108093758ec00\junit-platform-engine-1.6.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.junit.platform\junit-platform-commons\1.6.0\b0a75795cf03841d4f9cc54099557baffc11c727\junit-platform-commons-1.6.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.junit.jupiter\junit-jupiter-engine\5.6.0\83c9e737f6015d9e00029b9b1d51e952a884b8f9\junit-jupiter-engine-5.6.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.junit.jupiter\junit-jupiter-api\5.6.0\f29e6318333d2303ce4965c9819cfad08de7d1e5\junit-jupiter-api-5.6.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\junit\junit\4.13\e49ccba652b735c93bd6e6f59760d8254cf597dd\junit-4.13.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.google.oauth-client\google-oauth-client-java6\1.23.0\7acbddf56c4ad04efc9d3b48fe015e6250241bf0\google-oauth-client-java6-1.23.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.google.oauth-client\google-oauth-client\1.25.0\c9ee14e8b095b4b301b28d57755cc482b8d6f39f\google-oauth-client-1.25.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.google.http-client\google-http-client-jackson2\1.25.0\7c5c89bd4d0d34d9f1cb3396e8da6233e5074b5c\google-http-client-jackson2-1.25.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.mortbay.jetty\jetty\6.1.26\2f546e289fddd5b1fab1d4199fbb6e9ef43ee4b0\jetty-6.1.26.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.apiguardian\apiguardian-api\1.1.0\fc9dff4bb36d627bdc553de77e1f17efd790876c\apiguardian-api-1.1.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.opentest4j\opentest4j\1.2.0\28c11eb91f9b6d8e200631d46e20a7f407f2a046\opentest4j-1.2.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.hamcrest\hamcrest-core\1.3\42a25dc3219429f0e5d060061f71acb49bf010a0\hamcrest-core-1.3.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.mortbay.jetty\jetty-util\6.1.26\e5642fe0399814e1687d55a3862aa5a3417226a9\jetty-util-6.1.26.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.mortbay.jetty\servlet-api\2.5-20081211\22bff70037e1e6fa7e6413149489552ee2064702\servlet-api-2.5-20081211.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.google.http-client\google-http-client\1.25.0\5fb16523c393bfe0210c29db44742bd308311841\google-http-client-1.25.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.google.code.findbugs\jsr305\3.0.2\25ea2e8b0c338a877313bd4672d3fe056ea78f0d\jsr305-3.0.2.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.fasterxml.jackson.core\jackson-core\2.9.6\4e393793c37c77e042ccc7be5a914ae39251b365\jackson-core-2.9.6.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.apache.httpcomponents\httpclient\4.5.5\1603dfd56ebcd583ccdf337b6c3984ac55d89e58\httpclient-4.5.5.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\com.google.j2objc\j2objc-annotations\1.1\ed28ded51a8b1c6b112568def5f4b455e6809019\j2objc-annotations-1.1.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.apache.httpcomponents\httpcore\4.4.9\a86ce739e5a7175b4b234c290a00a5fdb80957a0\httpcore-4.4.9.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\commons-logging\commons-logging\1.2\4bfc12adfe4842bf07b657f0369c4cb522955686\commons-logging-1.2.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\commons-codec\commons-codec\1.10\4b95f4897fa13f2cd904aee711aeafc0c5295cd8\commons-codec-1.10.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.junit.platform\junit-platform-console\1.1.0\1ea376db54ab4ec0018c5e99d414e1c7c034387\junit-platform-console-1.1.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.junit.platform\junit-platform-launcher\1.1.0\ba098edde4e59cacd9225e238ea3ad9c946684ab\junit-platform-launcher-1.1.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.junit.platform\junit-platform-engine\1.1.0\2596bd4d909e7ea8d029272db4338075445d731b\junit-platform-engine-1.1.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.junit.platform\junit-platform-commons\1.1.0\d6aa21029f9cedfb4cc8a9e9efc0bd97987205b8\junit-platform-commons-1.1.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.apiguardian\apiguardian-api\1.0.0\3ef5276905e36f4d8055fe3cb0bdcc7503ffc85d\apiguardian-api-1.0.0.jar;C:\Users\nicol\.gradle\caches\modules-2\files-2.1\org.opentest4j\opentest4j\1.0.0\6f09c598e9ff64bf0ce2fa7e7de49a99ba83c0b4\opentest4j-1.0.0.jar"/>
<property name="java.class.version" value="57.0"/>
<property name="java.home" value="C:\Program Files\Java\jdk-13.0.2"/>
<property name="java.io.tmpdir" value="C:\Users\nicol\AppData\Local\Temp\"/>
<property name="java.library.path" value="C:\Program Files\Java\jdk-13.0.2\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jdk-13.0.2/bin/server;C:/Program Files/Java/jdk-13.0.2/bin;C:\Gradle\gradle-6.3\bin;C:\Program Files\Python38\;C:\MinGW\bin;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\dotnet\;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files\Git\cmd;C:\Users\nicol\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Docker Toolbox;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.1.1\bin;;C:\WINDOWS\system32;;."/>
<property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
<property name="java.runtime.version" value="13.0.2+8"/>
<property name="java.specification.name" value="Java Platform API Specification"/>
<property name="java.specification.vendor" value="Oracle Corporation"/>
<property name="java.specification.version" value="13"/>
<property name="java.vendor" value="Oracle Corporation"/>
<property name="java.vendor.url" value="https://java.oracle.com/"/>
<property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
<property name="java.version" value="13.0.2"/>
<property name="java.version.date" value="2020-01-14"/>
<property name="java.vm.compressedOopsMode" value="Zero based"/>
<property name="java.vm.info" value="mixed mode, sharing"/>
<property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
<property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
<property name="java.vm.specification.vendor" value="Oracle Corporation"/>
<property name="java.vm.specification.version" value="13"/>
<property name="java.vm.vendor" value="Oracle Corporation"/>
<property name="java.vm.version" value="13.0.2+8"/>
<property name="jdk.debug" value="release"/>
<property name="line.separator" value="
"/>
<property name="os.arch" value="amd64"/>
<property name="os.name" value="Windows 10"/>
<property name="os.version" value="10.0"/>
<property name="path.separator" value=";"/>
<property name="sun.arch.data.model" value="64"/>
<property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-13.0.2\bin"/>
<property name="sun.cpu.endian" value="little"/>
<property name="sun.cpu.isalist" value="amd64"/>
<property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
<property name="sun.java.command" value="org.junit.platform.console.ConsoleLauncher --details NONE --scan-class-path C:\Users\nicol\Documents\Diffie\progetto1920-diffie\build\classes\java\main;C:\Users\nicol\Documents\Diffie\progetto1920-diffie\build\resources\main;C:\Users\nicol\Documents\Diffie\progetto1920-diffie\build\classes\java\test;C:\Users\nicol\Documents\Diffie\progetto1920-diffie\build\resources\test -n ^.*Tests?$ -e junit-jupiter --reports-dir C:\Users\nicol\Documents\Diffie\progetto1920-diffie\build\test-results\junit-platform"/>
<property name="sun.java.launcher" value="SUN_STANDARD"/>
<property name="sun.jnu.encoding" value="Cp1252"/>
<property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
<property name="sun.os.patch.level" value=""/>
<property name="user.country" value="US"/>
<property name="user.dir" value="C:\Users\nicol\Documents\Diffie\progetto1920-diffie"/>
<property name="user.home" value="C:\Users\nicol"/>
<property name="user.language" value="en"/>
<property name="user.name" value="nicol"/>
<property name="user.script" value=""/>
<property name="user.timezone" value="Europe/Berlin"/>
<property name="user.variant" value=""/>
</properties>
<testcase name="boardDifferentPositionDifferentPieceTest()" classname="it.uniba.chess.test.BoardTest" time="0.033">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.BoardTest]/[method:boardDifferentPositionDifferentPieceTest()]
display-name: Check comparison with a different position (different piece)
]]></system-out>
</testcase>
<testcase name="boardsameReferenceTest()" classname="it.uniba.chess.test.BoardTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.BoardTest]/[method:boardsameReferenceTest()]
display-name: Check if a board is equal to itself
]]></system-out>
</testcase>
<testcase name="boardHashCodeTest()" classname="it.uniba.chess.test.BoardTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.BoardTest]/[method:boardHashCodeTest()]
display-name: Check hashCode comparison
]]></system-out>
</testcase>
<testcase name="boardOutOfBoundFileTest()" classname="it.uniba.chess.test.BoardTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.BoardTest]/[method:boardOutOfBoundFileTest()]
display-name: Check that an out of bounds file is not acceptable
]]></system-out>
</testcase>
<testcase name="boardDifferentPositionRankEdgeTest()" classname="it.uniba.chess.test.BoardTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.BoardTest]/[method:boardDifferentPositionRankEdgeTest()]
display-name: Check comparison with a different position (edge of rank)
]]></system-out>
</testcase>
<testcase name="boardDifferentPositionGenericRankTest()" classname="it.uniba.chess.test.BoardTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.BoardTest]/[method:boardDifferentPositionGenericRankTest()]
display-name: Check comparison with a different position (middle of rank)
]]></system-out>
</testcase>
<testcase name="boardDifferentClassTest()" classname="it.uniba.chess.test.BoardTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.BoardTest]/[method:boardDifferentClassTest()]
display-name: Check comparison with different classes
]]></system-out>
</testcase>
<testcase name="pieceDifferentClassTest()" classname="it.uniba.chess.pieces.test.PieceTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.pieces.test.PieceTest]/[method:pieceDifferentClassTest()]
display-name: Check comparison with different class
]]></system-out>
</testcase>
<testcase name="pieceDifferentUnicodeTest()" classname="it.uniba.chess.pieces.test.PieceTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.pieces.test.PieceTest]/[method:pieceDifferentUnicodeTest()]
display-name: Check that a Rook is not a Queen
]]></system-out>
</testcase>
<testcase name="pieceDifferentMovedTest()" classname="it.uniba.chess.pieces.test.PieceTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.pieces.test.PieceTest]/[method:pieceDifferentMovedTest()]
display-name: Check that a moved Rook is not equal to an umoved one
]]></system-out>
</testcase>
<testcase name="pieceSameReferenceTest()" classname="it.uniba.chess.pieces.test.PieceTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.pieces.test.PieceTest]/[method:pieceSameReferenceTest()]
display-name: Check if a piece is equal to itself
]]></system-out>
</testcase>
<testcase name="pieceHashCodeTest()" classname="it.uniba.chess.pieces.test.PieceTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.pieces.test.PieceTest]/[method:pieceHashCodeTest()]
display-name: Check hashCode comparison
]]></system-out>
</testcase>
<testcase name="pieceDifferentColorTest()" classname="it.uniba.chess.pieces.test.PieceTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.pieces.test.PieceTest]/[method:pieceDifferentColorTest()]
display-name: Check that a white Rook is not a black Rook
]]></system-out>
</testcase>
<testcase name="blackKingDisambiguationErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.011">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackKingDisambiguationErrorTest()]
display-name: Black King disambiguation
]]></system-out>
</testcase>
<testcase name="rookBlackMovementwithDifferentFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackMovementwithDifferentFileTest()]
display-name: Check black rook movement when file disambiguation is passed but is different from the final file
]]></system-out>
</testcase>
<testcase name="queenWhiteDiagonalMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:queenWhiteDiagonalMovementTest()]
display-name: Check white Queen movement
]]></system-out>
</testcase>
<testcase name="rookWhiteMovementWithDifferentRankNoRookErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteMovementWithDifferentRankNoRookErrorTest()]
display-name: Check white rook movement when rank disambiguation is passed but there is no Rook there
]]></system-out>
</testcase>
<testcase name="whiteKingMoveDefendedByPawnsTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whiteKingMoveDefendedByPawnsTest()]
display-name: White King can't move because there are 2 pawns defending
]]></system-out>
</testcase>
<testcase name="rookBlackMovementwithFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackMovementwithFileTest()]
display-name: Check black rook movement when file disambiguation is passed
]]></system-out>
</testcase>
<testcase name="rookWhitePieceInbetweenUpperErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhitePieceInbetweenUpperErrorTest()]
display-name: White Rook no2 but final square is occupied
]]></system-out>
</testcase>
<testcase name="blackKingCaptureDefendedByKnightTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackKingCaptureDefendedByKnightTest()]
display-name: Black King can't capture that Rook because is protected by a knight
]]></system-out>
</testcase>
<testcase name="knightWhiteMovementWithOneFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightWhiteMovementWithOneFileTest()]
display-name: Check white knight movement
]]></system-out>
</testcase>
<testcase name="rookBlackMovementwithDifferentRankNoRookErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackMovementwithDifferentRankNoRookErrorTest()]
display-name: Check black rook movement when rank disambiguation is passed but there is no Rook there
]]></system-out>
</testcase>
<testcase name="whiteKingCaptureDefendedByKnightTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whiteKingCaptureDefendedByKnightTest()]
display-name: White King can't capture that Rook because is protected by a knight
]]></system-out>
</testcase>
<testcase name="rookWhiteMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteMovementTest()]
display-name: Check white Rook movement
]]></system-out>
</testcase>
<testcase name="bishopWhiteMovementWithRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:bishopWhiteMovementWithRankTest()]
display-name: Check white Bishop movement when rank disambiguation is passed
]]></system-out>
</testcase>
<testcase name="blackKingMoveDefendedByPawnsTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackKingMoveDefendedByPawnsTest()]
display-name: Black King can't move because there are 2 pawns defending"
]]></system-out>
</testcase>
<testcase name="bishopWhiteMovementWithWrongRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:bishopWhiteMovementWithWrongRankTest()]
display-name: Check white Bishop movement when wrong rank disambiguation is passed
]]></system-out>
</testcase>
<testcase name="blackRooksWithYDisambiguationErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackRooksWithYDisambiguationErrorTest()]
display-name: two Black Rooks One File
]]></system-out>
</testcase>
<testcase name="kingBlackMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:kingBlackMovementTest()]
display-name: Check black King movement
]]></system-out>
</testcase>
<testcase name="rookWhiteCaptureTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteCaptureTest()]
display-name: Check white Rook capture
]]></system-out>
</testcase>
<testcase name="kingBlackCaptureTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:kingBlackCaptureTest()]
display-name: Check black King capture
]]></system-out>
</testcase>
<testcase name="blackRooksWithXDisambiguationErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackRooksWithXDisambiguationErrorTest()]
display-name: two Black Rooks One Rank
]]></system-out>
</testcase>
<testcase name="rookWhiteMovementWithDifferentFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteMovementWithDifferentFileTest()]
display-name: Check white rook movement when file disambiguation is passed but is different from the final file
]]></system-out>
</testcase>
<testcase name="blackRooksErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackRooksErrorTest()]
display-name: two Black Rooks
]]></system-out>
</testcase>
<testcase name="rookBlackPieceInbetweenUpperErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackPieceInbetweenUpperErrorTest()]
display-name: Black Rook no2 but final square is occupied
]]></system-out>
</testcase>
<testcase name="whiteKingCaptureDefendedByKingTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whiteKingCaptureDefendedByKingTest()]
display-name: White King can't capture that Rook because is protected by a King
]]></system-out>
</testcase>
<testcase name="queenBlackDiagonalMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:queenBlackDiagonalMovementTest()]
display-name: Check black Queen movement
]]></system-out>
</testcase>
<testcase name="rookWhitePieceInbetweenEasternErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhitePieceInbetweenEasternErrorTest()]
display-name: White Rook no3 but final square is occupied
]]></system-out>
</testcase>
<testcase name="movesPrintTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:movesPrintTest()]
display-name: Check printing of moves
]]></system-out>
</testcase>
<testcase name="helpMenuTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:helpMenuTest()]
display-name: Test help menu
]]></system-out>
</testcase>
<testcase name="knightBlackMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightBlackMovementTest()]
display-name: Check black knight movement
]]></system-out>
</testcase>
<testcase name="bishopBlackMovementwithRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:bishopBlackMovementwithRankTest()]
display-name: Check black Bishop movement when rank disambiguation is passed
]]></system-out>
</testcase>
<testcase name="eastWhiteTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:eastWhiteTest()]
display-name: east Check test with white
]]></system-out>
</testcase>
<testcase name="rookWhiteMovementWithRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteMovementWithRankTest()]
display-name: Check white rook movement when rank disambiguation is passed
]]></system-out>
</testcase>
<testcase name="whitePinTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whitePinTest()]
display-name: White Bishop puts his king in check thus it's illegal move
]]></system-out>
</testcase>
<testcase name="rookBlackPieceInbetweenEasternErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackPieceInbetweenEasternErrorTest()]
display-name: Black Rook no2 but final square is occupied
]]></system-out>
</testcase>
<testcase name="bishopWhiteMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:bishopWhiteMovementTest()]
display-name: Check white Bishop movement
]]></system-out>
</testcase>
<testcase name="rookWhiteMovementWithDifferentFileErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteMovementWithDifferentFileErrorTest()]
display-name: Check white rook movement when file disambiguation is passed but there is a piece inbetween
]]></system-out>
</testcase>
<testcase name="inactiveShortCastlingTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:inactiveShortCastlingTest()]
display-name: 0-0 but game is inactive
]]></system-out>
</testcase>
<testcase name="bishopBlackMovementwithWrongFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:bishopBlackMovementwithWrongFileTest()]
display-name: Check black Bishop movement when wrong file disambiguation is passed
]]></system-out>
</testcase>
<testcase name="rookBlackMovementwithDifferentRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackMovementwithDifferentRankTest()]
display-name: Check black rook movement when rank disambiguation is passed but is different from the final rank
]]></system-out>
</testcase>
<testcase name="knightBlackMovementWithOneFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightBlackMovementWithOneFileTest()]
display-name: Check black knight movement
]]></system-out>
</testcase>
<testcase name="rookBlackMovementwithRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackMovementwithRankTest()]
display-name: Check black rook movement when rank disambiguation is passed
]]></system-out>
</testcase>
<testcase name="knightWhiteMovementWithOneRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightWhiteMovementWithOneRankTest()]
display-name: Check white knight movement
]]></system-out>
</testcase>
<testcase name="rookBlackCaptureTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackCaptureTest()]
display-name: Check black Rook capture
]]></system-out>
</testcase>
<testcase name="itIsNotABlackRookYErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:itIsNotABlackRookYErrorTest()]
display-name: There is a black piece but it's not a rook
]]></system-out>
</testcase>
<testcase name="whiteRooksErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whiteRooksErrorTest()]
display-name: Two White Rooks
]]></system-out>
</testcase>
<testcase name="whiteKingVsBlackKingCaptureTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whiteKingVsBlackKingCaptureTest()]
display-name: White King can't capture a White Rook
]]></system-out>
</testcase>
<testcase name="rookWhiteMovementWithDifferentRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteMovementWithDifferentRankTest()]
display-name: Check white rook movement when rank disambiguation is passed but is different from the final rank
]]></system-out>
</testcase>
<testcase name="itIsNotABlackRookXErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:itIsNotABlackRookXErrorTest()]
display-name: There is a black piece but it's not a rook
]]></system-out>
</testcase>
<testcase name="rookBlackPieceInbetweeWesternErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackPieceInbetweeWesternErrorTest()]
display-name: Black Rook no3 but final square is occupied
]]></system-out>
</testcase>
<testcase name="rookWhitePieceInbetweenLowerErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhitePieceInbetweenLowerErrorTest()]
display-name: White Rook no1 but final square is occupied
]]></system-out>
</testcase>
<testcase name="kingWhiteMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:kingWhiteMovementTest()]
display-name: Check white King movement
]]></system-out>
</testcase>
<testcase name="boardActiveGameTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:boardActiveGameTest()]
display-name: Check 'board' command with active game
]]></system-out>
</testcase>
<testcase name="rookWhitePieceInbetweenWesternErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhitePieceInbetweenWesternErrorTest()]
display-name: White Rook no2 but final square is occupied
]]></system-out>
</testcase>
<testcase name="rookBlackPieceInbetweenLowerErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackPieceInbetweenLowerErrorTest()]
display-name: Black Rook no1 but final square is occupied
]]></system-out>
</testcase>
<testcase name="bishopBlackMovementwithWrongRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:bishopBlackMovementwithWrongRankTest()]
display-name: Check black Bishop movement when wrong rank disambiguation is passed
]]></system-out>
</testcase>
<testcase name="noBlackRooksXTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:noBlackRooksXTest()]
display-name: no black rooks in this rank
]]></system-out>
</testcase>
<testcase name="noBlackRooksYTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:noBlackRooksYTest()]
display-name: no black rooks in this rank
]]></system-out>
</testcase>
<testcase name="knightWhiteMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightWhiteMovementTest()]
display-name: Check white knight movement
]]></system-out>
</testcase>
<testcase name="blackKingCaptureDefendedByKingTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackKingCaptureDefendedByKingTest()]
display-name: Black King can't capture that Rook because is protected by a King
]]></system-out>
</testcase>
<testcase name="knightBlackMovementWithOneRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightBlackMovementWithOneRankTest()]
display-name: Check black knight movement
]]></system-out>
</testcase>
<testcase name="knightWhiteMovementWithFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightWhiteMovementWithFileTest()]
display-name: Check white knight movement
]]></system-out>
</testcase>
<testcase name="queenBlackMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:queenBlackMovementTest()]
display-name: Check black Queen movement
]]></system-out>
</testcase>
<testcase name="itIsNotAWhiteRookYErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:itIsNotAWhiteRookYErrorTest()]
display-name: There is a white piece but it's not a rook
]]></system-out>
</testcase>
<testcase name="rookBlackMovementwithDifferentFileErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackMovementwithDifferentFileErrorTest()]
display-name: Check black rook movement when file disambiguation is passed but there is a piece inbetween
]]></system-out>
</testcase>
<testcase name="itIsNotAWhiteRookXErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:itIsNotAWhiteRookXErrorTest()]
display-name: There is a white piece but it's not a rook
]]></system-out>
</testcase>
<testcase name="whiteKingCaptureDefendedByPawnTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whiteKingCaptureDefendedByPawnTest()]
display-name: White King can't capture that Rook because is protected by a pawn
]]></system-out>
</testcase>
<testcase name="grammaticallyWrongMoveTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:grammaticallyWrongMoveTest()]
display-name: Test grammatically wrong move
]]></system-out>
</testcase>
<testcase name="rookWhiteMovementWithDifferentFileNoRookErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteMovementWithDifferentFileNoRookErrorTest()]
display-name: Check white rook movement when file disambiguation is passed but there is no Rook there
]]></system-out>
</testcase>
<testcase name="knightBlackMovementWithFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightBlackMovementWithFileTest()]
display-name: Check black knight movement
]]></system-out>
</testcase>
<testcase name="rookBlackMovementwithDifferentFileNoRookErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackMovementwithDifferentFileNoRookErrorTest()]
display-name: Check black rook movement when file disambiguation is passed but there is no Rook there
]]></system-out>
</testcase>
<testcase name="rookBlackMovementwithDifferentFile2Test()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackMovementwithDifferentFile2Test()]
display-name: Check black rook movement when file disambiguation is passed but is different from the final file no2
]]></system-out>
</testcase>
<testcase name="queenBlackIllegalMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:queenBlackIllegalMovementTest()]
display-name: Check black Queen movement
]]></system-out>
</testcase>
<testcase name="blackPinCaptureTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackPinCaptureTest()]
display-name: Black Bishop puts his king in check thus while capturingit's illegal move
]]></system-out>
</testcase>
<testcase name="blackKingVsWhiteKingCaptureTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackKingVsWhiteKingCaptureTest()]
display-name: Black King can't capture a Black Rook
]]></system-out>
</testcase>
<testcase name="knightWhiteMovementWithRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightWhiteMovementWithRankTest()]
display-name: Check white knight movement
]]></system-out>
</testcase>
<testcase name="knightBlackIllegalMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightBlackIllegalMovementTest()]
display-name: Check black Knight movement
]]></system-out>
</testcase>
<testcase name="boardInactiveGameTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:boardInactiveGameTest()]
display-name: Check 'board' command with inactive game
]]></system-out>
</testcase>
<testcase name="rookBlackMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackMovementTest()]
display-name: Check black Rook movement
]]></system-out>
</testcase>
<testcase name="pawnBlackCaptureNormalOKTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:pawnBlackCaptureNormalOKTest()]
display-name: Check knight (generic) capture
]]></system-out>
</testcase>
<testcase name="queenWhiteIllegalMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:queenWhiteIllegalMovementTest()]
display-name: Check white Queen movement
]]></system-out>
</testcase>
<testcase name="capturesPrintTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:capturesPrintTest()]
display-name: Check captures (Scandinavian defense)
]]></system-out>
</testcase>
<testcase name="noWhiteRooksXTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:noWhiteRooksXTest()]
display-name: no white rooks in this rank
]]></system-out>
</testcase>
<testcase name="noWhiteRooksYTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:noWhiteRooksYTest()]
display-name: no white rooks in this rank
]]></system-out>
</testcase>
<testcase name="queenBlackIllegalMoveTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:queenBlackIllegalMoveTest()]
display-name: More than one black Queen, illegal move
]]></system-out>
</testcase>
<testcase name="rookWhiteMovementWithDifferentFile2Test()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteMovementWithDifferentFile2Test()]
display-name: Check white rook movement when file disambiguation is passed but is different from the final file no2
]]></system-out>
</testcase>
<testcase name="queenWhiteIllegalMoveTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:queenWhiteIllegalMoveTest()]
display-name: More than one white Queen, illegal move
]]></system-out>
</testcase>
<testcase name="rookBlackMovementwithDifferentRank2Test()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookBlackMovementwithDifferentRank2Test()]
display-name: Check black rook movement when rank disambiguation is passed but is different from the final rank no2
]]></system-out>
</testcase>
<testcase name="whiteRooksWithYDisambiguationErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whiteRooksWithYDisambiguationErrorTest()]
display-name: Two White Rooks One File
]]></system-out>
</testcase>
<testcase name="queenWhiteMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:queenWhiteMovementTest()]
display-name: Check white Queen movement
]]></system-out>
</testcase>
<testcase name="whiteRooksWithXDisambiguationErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whiteRooksWithXDisambiguationErrorTest()]
display-name: Two White Rooks One Rank
]]></system-out>
</testcase>
<testcase name="blackPinTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackPinTest()]
display-name: Black Bishop puts his king in check thus it's illegal move
]]></system-out>
</testcase>
<testcase name="bishopWhiteMovementWithFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:bishopWhiteMovementWithFileTest()]
display-name: Check white Bishop movement when file disambiguation is passed
]]></system-out>
</testcase>
<testcase name="whitePinCaptureTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whitePinCaptureTest()]
display-name: White Bishop puts his king in check while capturing thus it's illegal move
]]></system-out>
</testcase>
<testcase name="knightWhiteIllegalMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightWhiteIllegalMovementTest()]
display-name: Check white Knight movement
]]></system-out>
</testcase>
<testcase name="bishopWhiteMovementWithWrongFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:bishopWhiteMovementWithWrongFileTest()]
display-name: Check white Bishop movement when wrong file disambiguation is passed
]]></system-out>
</testcase>
<testcase name="knightBlackMovementWithRankTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:knightBlackMovementWithRankTest()]
display-name: Check black knight movement
]]></system-out>
</testcase>
<testcase name="eastBlackTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:eastBlackTest()]
display-name: east Check test with white
]]></system-out>
</testcase>
<testcase name="inactiveGameMoveTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:inactiveGameMoveTest()]
display-name: move during inactive game test
]]></system-out>
</testcase>
<testcase name="wrongRookBlackColorYErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:wrongRookBlackColorYErrorTest()]
display-name: There is a rook but is white and not black
]]></system-out>
</testcase>
<testcase name="wrongRookWhiteColorYErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:wrongRookWhiteColorYErrorTest()]
display-name: There is a rook but is black and not white
]]></system-out>
</testcase>
<testcase name="bishopBlackMovementTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:bishopBlackMovementTest()]
display-name: Check black Bishop movement
]]></system-out>
</testcase>
<testcase name="inactiveLongCastlingTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:inactiveLongCastlingTest()]
display-name: 0-0-0 but game is inactive
]]></system-out>
</testcase>
<testcase name="blackKingCaptureDefendedByPawnTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:blackKingCaptureDefendedByPawnTest()]
display-name: Black King can't capture that Rook because is protected by a pawn
]]></system-out>
</testcase>
<testcase name="wrongRookBlackColorXErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:wrongRookBlackColorXErrorTest()]
display-name: There is a rook but is white and not black
]]></system-out>
</testcase>
<testcase name="wrongRookWhiteColorXErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:wrongRookWhiteColorXErrorTest()]
display-name: There is a rook but is black and not white
]]></system-out>
</testcase>
<testcase name="kingWhiteCaptureTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:kingWhiteCaptureTest()]
display-name: Check white King capture
]]></system-out>
</testcase>
<testcase name="bishopBlackMovementwithFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:bishopBlackMovementwithFileTest()]
display-name: Check black Bishop movement when file disambiguation is passed
]]></system-out>
</testcase>
<testcase name="rookWhiteMovementWithFileTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteMovementWithFileTest()]
display-name: Check white rook movement when file disambiguation is passed
]]></system-out>
</testcase>
<testcase name="rookWhiteMovementWithDifferentRank2Test()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:rookWhiteMovementWithDifferentRank2Test()]
display-name: Check white rook movement when rank disambiguation is passed but is different from the final rank no2
]]></system-out>
</testcase>
<testcase name="pawnIllegalMoveTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:pawnIllegalMoveTest()]
display-name: Test illegal pawn move
]]></system-out>
</testcase>
<testcase name="whiteKingDisambiguationErrorTest()" classname="it.uniba.chess.test.InputValidatorTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.InputValidatorTest]/[method:whiteKingDisambiguationErrorTest()]
display-name: White King disambiguation
]]></system-out>
</testcase>
<testcase name="unsuccessfullQuitCommandTest()" classname="it.uniba.main.test.AppMainTest" time="0.017">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.main.test.AppMainTest]/[method:unsuccessfullQuitCommandTest()]
display-name: Check handling of illegal move
]]></system-out>
</testcase>
<testcase name="successfulRePlayCommandTest()" classname="it.uniba.main.test.AppMainTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.main.test.AppMainTest]/[method:successfulRePlayCommandTest()]
display-name: Check successful re-playing
]]></system-out>
</testcase>
<testcase name="unsuccessfulQuitCommandTest()" classname="it.uniba.main.test.AppMainTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.main.test.AppMainTest]/[method:unsuccessfulQuitCommandTest()]
display-name: Test unsuccessful quit after start
]]></system-out>
</testcase>
<testcase name="successfulQuitCommandTest()" classname="it.uniba.main.test.AppMainTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.main.test.AppMainTest]/[method:successfulQuitCommandTest()]
display-name: Check successful quit after start
]]></system-out>
</testcase>
<testcase name="unsuccessfulRePlayCommandTest()" classname="it.uniba.main.test.AppMainTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.main.test.AppMainTest]/[method:unsuccessfulRePlayCommandTest()]
display-name: Check successful re-playing
]]></system-out>
</testcase>
<testcase name="castleShortWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:castleShortWhiteTest()]
display-name: Check successful white short castle
]]></system-out>
</testcase>
<testcase name="shortCastleWithg1OccupiedWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithg1OccupiedWhiteTest()]
display-name: short castle with white but g1 is occupied
]]></system-out>
</testcase>
<testcase name="longCastleWithc8OccupiedBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithc8OccupiedBlackTest()]
display-name: long castle with black but c8 is occupied
]]></system-out>
</testcase>
<testcase name="shortCastleWithMovedKingWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithMovedKingWhiteTest()]
display-name: short castle with white but the king was previously moved
]]></system-out>
</testcase>
<testcase name="longCastleNotOccupiedWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleNotOccupiedWhiteTest()]
display-name: long castle but but black king's square is not occupied
]]></system-out>
</testcase>
<testcase name="shortCastleNotOccupiedWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleNotOccupiedWhiteTest()]
display-name: short castle but black king's square is not occupied
]]></system-out>
</testcase>
<testcase name="castleShortWhiteWithRTest()" classname="it.uniba.chess.test.CastleTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:castleShortWhiteWithRTest()]
display-name: Check successful white short castle with Rg1
]]></system-out>
</testcase>
<testcase name="shortCastleWithWrongKingColorWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithWrongKingColorWhiteTest()]
display-name: short castle Wrong Color, is Black and not White
]]></system-out>
</testcase>
<testcase name="longCastleNotOccupiedRookBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleNotOccupiedRookBlackTest()]
display-name: long castle but but black rook's square is not occupied
]]></system-out>
</testcase>
<testcase name="castleLongBlackwithRTest()" classname="it.uniba.chess.test.CastleTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:castleLongBlackwithRTest()]
display-name: Check successful black long castle with Rc8
]]></system-out>
</testcase>
<testcase name="longCastleWithb1OccupiedWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithb1OccupiedWhiteTest()]
display-name: long castle with white but b1 is occupied
]]></system-out>
</testcase>
<testcase name="shortCastleWithg1InCheckWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithg1InCheckWhiteTest()]
display-name: short castle with white but g1 is check
]]></system-out>
</testcase>
<testcase name="castleLongBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:castleLongBlackTest()]
display-name: Check successful black long castle
]]></system-out>
</testcase>
<testcase name="shortCastleWithf1CheckWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithf1CheckWhiteTest()]
display-name: short castle with white but f1 is in check
]]></system-out>
</testcase>
<testcase name="shortCastleWithf1OccupiedWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithf1OccupiedWhiteTest()]
display-name: short castle with white but f1 is occupied
]]></system-out>
</testcase>
<testcase name="longCastleWithb8OccupiedBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithb8OccupiedBlackTest()]
display-name: long castle with black but b8 is occupied
]]></system-out>
</testcase>
<testcase name="longCastleWithMovedKingBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithMovedKingBlackTest()]
display-name: long castle with black but the king was previously moved
]]></system-out>
</testcase>
<testcase name="longCastleWithMovedKingBlackWithRTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithMovedKingBlackWithRTest()]
display-name: long castle with black but the king was previously moved with Rc8
]]></system-out>
</testcase>
<testcase name="longCastleWithWrongRookColorBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithWrongRookColorBlackTest()]
display-name: long castle Wrong rook, is White and not Black
]]></system-out>
</testcase>
<testcase name="longCastleWithMovedRookBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithMovedRookBlackTest()]
display-name: long castle with black but the rook was previously moved
]]></system-out>
</testcase>
<testcase name="shortCastleWithg7OccupiedBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithg7OccupiedBlackTest()]
display-name: short castle with black but g8 is occupied
]]></system-out>
</testcase>
<testcase name="longCastleBlackKingInCheckTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleBlackKingInCheckTest()]
display-name: long castle but black king is in check so is unsuccessful
]]></system-out>
</testcase>
<testcase name="longCastleWhiteKingInCheckTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWhiteKingInCheckTest()]
display-name: long castle but white king is in check so is unsuccessful
]]></system-out>
</testcase>
<testcase name="castleLongWhitewithRTest()" classname="it.uniba.chess.test.CastleTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:castleLongWhitewithRTest()]
display-name: Check successful white long castle with Rc1
]]></system-out>
</testcase>
<testcase name="shortCastleWithMovedKingBlackWithRTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithMovedKingBlackWithRTest()]
display-name: short castle with black but the king was previously moved with Rg8
]]></system-out>
</testcase>
<testcase name="shortCastleWithWrongRookColorBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithWrongRookColorBlackTest()]
display-name: short castle Wrong rook, is White and not Black
]]></system-out>
</testcase>
<testcase name="longCastleWithd1InCheckWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithd1InCheckWhiteTest()]
display-name: long castle with white but d1 is check
]]></system-out>
</testcase>
<testcase name="shortCastleBlackKingInCheckTest()" classname="it.uniba.chess.test.CastleTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleBlackKingInCheckTest()]
display-name: short castle but black king is in check so is unsuccessful
]]></system-out>
</testcase>
<testcase name="shortCastleWhiteKingInCheckTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWhiteKingInCheckTest()]
display-name: short castle but white king is in check so is unsuccessful
]]></system-out>
</testcase>
<testcase name="longCastleWithMovedRookTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithMovedRookTest()]
display-name: long castle with white but the rook was previously moved
]]></system-out>
</testcase>
<testcase name="longCastleNotOccupiedRookWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleNotOccupiedRookWhiteTest()]
display-name: long castle but but black rook's square is not occupied
]]></system-out>
</testcase>
<testcase name="longCastleWithMovedKingWhiteWithRTest()" classname="it.uniba.chess.test.CastleTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithMovedKingWhiteWithRTest()]
display-name: long castle  with white but the king was previously moved with Rc1
]]></system-out>
</testcase>
<testcase name="shortCastleWithWrongPieceBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithWrongPieceBlackTest()]
display-name: short castle Wrong Color, is White and not Black
]]></system-out>
</testcase>
<testcase name="longCastleWithd8inCheckBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithd8inCheckBlackTest()]
display-name: long castle with black but d8 is in check
]]></system-out>
</testcase>
<testcase name="castleLongWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:castleLongWhiteTest()]
display-name: Check successful white long castle
]]></system-out>
</testcase>
<testcase name="longCastleWithc8InCheckBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithc8InCheckBlackTest()]
display-name: long castle with black but c8 is in check
]]></system-out>
</testcase>
<testcase name="longCastleWithc1CheckWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithc1CheckWhiteTest()]
display-name: long castle with white but c1 is in check
]]></system-out>
</testcase>
<testcase name="shortCastleWithf7OccupiedBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithf7OccupiedBlackTest()]
display-name: short castle with black but f8 is occupied
]]></system-out>
</testcase>
<testcase name="longCastleWithMovedKingWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithMovedKingWhiteTest()]
display-name: long castle  with white but the king was previously moved
]]></system-out>
</testcase>
<testcase name="shortCastleWithMovedRookTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithMovedRookTest()]
display-name: short castle with white but the rook was previously moved
]]></system-out>
</testcase>
<testcase name="longCastleWithWrongRookColorWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithWrongRookColorWhiteTest()]
display-name: long castle Wrong rook, is Black and not White
]]></system-out>
</testcase>
<testcase name="shortCastleNotOccupiedRookBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleNotOccupiedRookBlackTest()]
display-name: short castle but but black rook's square is not occupied
]]></system-out>
</testcase>
<testcase name="castleShortBlackwithRmoveTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:castleShortBlackwithRmoveTest()]
display-name: Check successful black short castle with Rg8
]]></system-out>
</testcase>
<testcase name="shortCastleWithMovedKingWhiteWithRTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithMovedKingWhiteWithRTest()]
display-name: short castle with white but the king was previously moved with Rg1
]]></system-out>
</testcase>
<testcase name="longCastleWithWrongPieceRookBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithWrongPieceRookBlackTest()]
display-name: long castle Wrong Piece, is a Bishop and not a Rook
]]></system-out>
</testcase>
<testcase name="longCastleWithWrongPieceBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithWrongPieceBlackTest()]
display-name: short castle Wrong Color, is White and not Black
]]></system-out>
</testcase>
<testcase name="shortCastleWithWrongRookColorWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithWrongRookColorWhiteTest()]
display-name: short castle Wrong rook, is Black and not White
]]></system-out>
</testcase>
<testcase name="longCastleWithWrongKingColorBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithWrongKingColorBlackTest()]
display-name: Wrong Color long castle, is White and not Black
]]></system-out>
</testcase>
<testcase name="shortCastleWithWrongPieceRookBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithWrongPieceRookBlackTest()]
display-name: short castle Wrong Piece, is a Bishop and not a Rook
]]></system-out>
</testcase>
<testcase name="castleShortBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:castleShortBlackTest()]
display-name: Check successful black short castle
]]></system-out>
</testcase>
<testcase name="shortCastleWithMovedKingBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithMovedKingBlackTest()]
display-name: short castle with black but the king was previously moved
]]></system-out>
</testcase>
<testcase name="longCastleNotOccupiedBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleNotOccupiedBlackTest()]
display-name: long castle but but black king's square is not occupied
]]></system-out>
</testcase>
<testcase name="longCastleWithd1OccupiedWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithd1OccupiedWhiteTest()]
display-name: long castle with white but d1 is occupied
]]></system-out>
</testcase>
<testcase name="shortCastleWithWrongPieceWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithWrongPieceWhiteTest()]
display-name: short castle Wrong Piece, is a Bishop and not a King
]]></system-out>
</testcase>
<testcase name="shortCastleNotOccupiedBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleNotOccupiedBlackTest()]
display-name: short castle but black king's square is not occupied
]]></system-out>
</testcase>
<testcase name="shortCastleWithWrongKingColorBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithWrongKingColorBlackTest()]
display-name: short castle Wrong Color, is White and not Black
]]></system-out>
</testcase>
<testcase name="longCastleWithd8OccupiedBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithd8OccupiedBlackTest()]
display-name: long castle with black but d8 is occupied
]]></system-out>
</testcase>
<testcase name="shortCastleWithMovedRookBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithMovedRookBlackTest()]
display-name: short castle with black but the rook was previously moved
]]></system-out>
</testcase>
<testcase name="shortCastleNotOccupiedRookWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleNotOccupiedRookWhiteTest()]
display-name: short castle but but black rook's square is not occupied
]]></system-out>
</testcase>
<testcase name="longCastleWithWrongPieceRookWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithWrongPieceRookWhiteTest()]
display-name: long castle Wrong Piece, is a Bishop and not a Rook
]]></system-out>
</testcase>
<testcase name="longCastleWithWrongPieceWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithWrongPieceWhiteTest()]
display-name: short castle Wrong Piece, is a Bishop and not a King
]]></system-out>
</testcase>
<testcase name="longCastleWithc1OccupiedWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithc1OccupiedWhiteTest()]
display-name: long castle with white but c1 is occupied
]]></system-out>
</testcase>
<testcase name="shortCastleWithg7inCheckBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithg7inCheckBlackTest()]
display-name: short castle with black but g8 is in check
]]></system-out>
</testcase>
<testcase name="longCastleWithWrongKingColorWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:longCastleWithWrongKingColorWhiteTest()]
display-name: Wrong Color long castle, is Black and not White
]]></system-out>
</testcase>
<testcase name="shortCastleWithf7InCheckBlackTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithf7InCheckBlackTest()]
display-name: short castle with black but f8 is in check
]]></system-out>
</testcase>
<testcase name="shortCastleWithWrongPieceRookWhiteTest()" classname="it.uniba.chess.test.CastleTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.CastleTest]/[method:shortCastleWithWrongPieceRookWhiteTest()]
display-name: short castle Wrong Piece, is a Bishop and not a Rook
]]></system-out>
</testcase>
<testcase name="pawnBlackPushOutOfBoundsTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnBlackPushOutOfBoundsTest()]
display-name: Check out of bounds black pawn push
]]></system-out>
</testcase>
<testcase name="pawnCaptureWrongPieceTest()" classname="it.uniba.chess.test.PawnTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureWrongPieceTest()]
display-name: Check wrong piece trying a pawn capture
]]></system-out>
</testcase>
<testcase name="pawnEnPassantErrorTest()" classname="it.uniba.chess.test.PawnTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnEnPassantErrorTest()]
display-name: Check if a string like 'e3e.p.' is accepted
]]></system-out>
</testcase>
<testcase name="pawnCaptureEnPassantLateMoveTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureEnPassantLateMoveTest()]
display-name: Check white en-passant on non-subsequent move
]]></system-out>
</testcase>
<testcase name="pawnCaptureEnPassantDoubledTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureEnPassantDoubledTest()]
display-name: Check en-passant on doubled pawns and wrong rank
]]></system-out>
</testcase>
<testcase name="pawnCaptureWhiteBehindTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureWhiteBehindTest()]
display-name: Check white pawn capture behind it
]]></system-out>
</testcase>
<testcase name="pawnWhitePushOutOfBoundsTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnWhitePushOutOfBoundsTest()]
display-name: Check out of bounds white pawn push
]]></system-out>
</testcase>
<testcase name="pawnCaptureEnPassantWrongCapturedPieceTest()" classname="it.uniba.chess.test.PawnTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureEnPassantWrongCapturedPieceTest()]
display-name: Check pawn trying en-passant on a non-pawn piece
]]></system-out>
</testcase>
<testcase name="pawnCaptureFileTooFarTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureFileTooFarTest()]
display-name: Check abs(startY - endY) > 1 normal capture
]]></system-out>
</testcase>
<testcase name="pawnTwoSquarePushWrongColorTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnTwoSquarePushWrongColorTest()]
display-name: Check wrong color 2-square push
]]></system-out>
</testcase>
<testcase name="pawnPushDoubledOKTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnPushDoubledOKTest()]
display-name: Check doubled pawns
]]></system-out>
</testcase>
<testcase name="pawnCaptureEnPassantOKTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureEnPassantOKTest()]
display-name: Check en-passant pawn capture
]]></system-out>
</testcase>
<testcase name="pawnPushWrongPieceTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnPushWrongPieceTest()]
display-name: Check wrong piece trying a pawn push
]]></system-out>
</testcase>
<testcase name="pawnOneSquarePushPieceNotFoundTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnOneSquarePushPieceNotFoundTest()]
display-name: Check not found 1-square push
]]></system-out>
</testcase>
<testcase name="pawnPushCaptureTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnPushCaptureTest()]
display-name: Check pawn push when it should be a capture
]]></system-out>
</testcase>
<testcase name="pawnOneSquarePushWrongPieceTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnOneSquarePushWrongPieceTest()]
display-name: Check wrong piece 1-square push
]]></system-out>
</testcase>
<testcase name="pawnOneSquarePushOKTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnOneSquarePushOKTest()]
display-name: Check successful pawn 1-square push
]]></system-out>
</testcase>
<testcase name="pawnTwoSquarePushOKTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnTwoSquarePushOKTest()]
display-name: Check successful pawn 2-squares push
]]></system-out>
</testcase>
<testcase name="pawnCaptureErrorTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureErrorTest()]
display-name: Check if a string like 'xe3' is accepted
]]></system-out>
</testcase>
<testcase name="pawnCapturePieceNotFoundTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCapturePieceNotFoundTest()]
display-name: Check piece not found normal capture
]]></system-out>
</testcase>
<testcase name="pawnCaptureNotEnpassantTest()" classname="it.uniba.chess.test.PawnTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureNotEnpassantTest()]
display-name: Check normal capture with en-passant conditions
]]></system-out>
</testcase>
<testcase name="pawnPushAbsolutePinnedTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnPushAbsolutePinnedTest()]
display-name: Check absolute-pinned pawn push
]]></system-out>
</testcase>
<testcase name="pawnRankDisambiguationErrorTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnRankDisambiguationErrorTest()]
display-name: Check if a string like 'e3xd4' is accepted
]]></system-out>
</testcase>
<testcase name="pawnCaptureEnPassantLatePawnPushEdgeCaseMoveTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureEnPassantLatePawnPushEdgeCaseMoveTest()]
display-name: Check white en-passant on non-subsequent move with 2-square black push edge case
]]></system-out>
</testcase>
<testcase name="pawnCaptureEnPassantWithBlackTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureEnPassantWithBlackTest()]
display-name: Check en-passant pawn capture with e.p. grammar with black
]]></system-out>
</testcase>
<testcase name="pawnCaptureEnPassantPinnedTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureEnPassantPinnedTest()]
display-name: Check absolute-pinned en-passant capture
]]></system-out>
</testcase>
<testcase name="pawnCaptureEnPassantOwnColorTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureEnPassantOwnColorTest()]
display-name: Check en-passant on own color
]]></system-out>
</testcase>
<testcase name="pawnPushOccupiedTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnPushOccupiedTest()]
display-name: Check pawn push when it is already occupied
]]></system-out>
</testcase>
<testcase name="pawnPushInFrontOfWrongColorTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnPushInFrontOfWrongColorTest()]
display-name: Check correct color pawn in front of wrong color pawn
]]></system-out>
</testcase>
<testcase name="pawnTwoSquarePushWrongPieceTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnTwoSquarePushWrongPieceTest()]
display-name: Check wrong piece 2-square push
]]></system-out>
</testcase>
<testcase name="pawnBlackCaptureNormalOKTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnBlackCaptureNormalOKTest()]
display-name: Check black normal pawn capture
]]></system-out>
</testcase>
<testcase name="pawnPushBehindWrongColorTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnPushBehindWrongColorTest()]
display-name: Check correct color pawn behind wrong color pawn
]]></system-out>
</testcase>
<testcase name="pawnTwoSquarePushPieceMovedTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnTwoSquarePushPieceMovedTest()]
display-name: Check already moved pawn 2-squares push
]]></system-out>
</testcase>
<testcase name="pawnCaptureBlackBehindTest()" classname="it.uniba.chess.test.PawnTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureBlackBehindTest()]
display-name: Check black pawn capture behind it
]]></system-out>
</testcase>
<testcase name="pawnXCharachterMissingErrorTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnXCharachterMissingErrorTest()]
display-name: no x in pawn capture
]]></system-out>
</testcase>
<testcase name="pawnWhiteCaptureNormalOKTest()" classname="it.uniba.chess.test.PawnTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnWhiteCaptureNormalOKTest()]
display-name: Check white normal pawn capture
]]></system-out>
</testcase>
<testcase name="pawnCaptureEnPassantWithWhiteTest()" classname="it.uniba.chess.test.PawnTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:it.uniba.chess.test.PawnTest]/[method:pawnCaptureEnPassantWithWhiteTest()]
display-name: Check en-passant pawn capture with e.p. grammar
]]></system-out>
</testcase>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]
display-name: JUnit Jupiter
]]></system-out>
</testsuite>
